import psycopg2
import json
from datetime import datetime as dt

# --- Database Interaction Functions ---

def insert_patient(cur, data):
    """Inserts or updates a patient record and returns the patient's PK uuid."""
    application_uuid_from_json = data.get("uuid") # This is the application_uuid for the patient table
    if not application_uuid_from_json:
        raise ValueError("Application UUID (from JSON 'uuid' field) is missing but required.")

    # patient.uuid (PK) is DB-generated
    cur.execute("""
        INSERT INTO treatment_chart.patient (uhid, name, age_in_months, age_in_years, sex, application_uuid)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT (uhid) DO UPDATE SET
            name = EXCLUDED.name,
            age_in_months = EXCLUDED.age_in_months,
            age_in_years = EXCLUDED.age_in_years,
            sex = EXCLUDED.sex,
            application_uuid = EXCLUDED.application_uuid
        RETURNING uuid;
    """, (
        data.get("uhid"),
        data.get("Name"),
        data.get("Age_month"),
        data.get("Age_year"),
        data.get("Sex"),
        application_uuid_from_json
    ))
    patient_pk_uuid = cur.fetchone()[0] # This is the patient.uuid (PK)
    print(f"Patient PK (DB-generated or existing): {patient_pk_uuid} (App UUID from JSON: {application_uuid_from_json})")
    return patient_pk_uuid

def insert_diagnosis(cur, data, fk_patient_uuid):
    """
    Inserts a diagnosis record and returns its diagnosis_id (PK).
    The diagnosis.patient_uuid column stores the foreign key to patient.uuid.
    """
    # diagnosis.diagnosis_id (PK) is DB-generated
    # diagnosis.patient_uuid (FK) is fk_patient_uuid
    diagnosis_text = data.get("Diagnosis") or data.get("diagnosis") or "N/A"
    cur.execute("""
        INSERT INTO treatment_chart.diagnosis (patient_uuid, diagnosis_text, consultants, jr, sr)
        VALUES (%s, %s, %s, %s, %s)
        RETURNING diagnosis_id;
    """, (
        fk_patient_uuid, # This is the patient's PK, going into diagnosis.patient_uuid (FK column)
        diagnosis_text,
        data.get("Consultants") or data.get("consultants"),
        data.get("JR") or data.get("jr"),
        data.get("SR") or data.get("sr")
    ))
    diagnosis_pk_id = cur.fetchone()[0] # This is the diagnosis.diagnosis_id (PK)
    print(f"Diagnosis PK (DB-generated): {diagnosis_pk_id}, linked to Patient PK: {fk_patient_uuid}")
    return diagnosis_pk_id


def insert_observation(cur, data, fk_diagnosis_id, each_entry_layout_data, each_table_row_layout_data):
    """
    Inserts an observation record and returns its observation_id (PK).
    prescription_date and prescription_time are extracted from each_table_row_layout's 'row_header_description'.
    Other metrics are also extracted from each_table_row_layout's 'row_header_description'.
    created_at is auto-generated by the DB.
    """
    prescription_date_val = None
    prescription_time_val = None
    weight_val = None
    length_val = None
    bsa_val = None
    tfr_val = None
    tfv_val = None
    ivm_val = None
    ivf_val = None
    feeds_val = None
    gir_mg_kg_min_val = None
    k_plus_val = None
    egfr_val = None

    if each_table_row_layout_data:
        for row_key, row_details in each_table_row_layout_data.items():
            header_name = row_details.get("row_header_name", "").strip().lower()
            value_from_description = row_details.get("row_header_description", "").strip()

            if value_from_description:
                if header_name == "date":
                    prescription_date_val = value_from_description
                elif header_name == "time":
                    prescription_time_val = value_from_description
                elif header_name == "weight":
                    weight_val = value_from_description
                elif header_name == "length":
                    length_val = value_from_description
                elif header_name == "bsa":
                    bsa_val = value_from_description
                elif header_name == "tfr":
                    tfr_val = value_from_description
                elif header_name == "tfv":
                    tfv_val = value_from_description
                elif header_name == "ivm":
                    ivm_val = value_from_description
                elif header_name == "ivf":
                    ivf_val = value_from_description
                elif header_name == "feeds":
                    feeds_val = value_from_description
                elif header_name == "gir(mg/kg/min)":
                    gir_mg_kg_min_val = value_from_description
                elif header_name == "k+":
                    k_plus_val = value_from_description
                elif header_name == "egfr":
                    egfr_val = value_from_description

    if prescription_date_val is None:
        prescription_date_val = "N/A"
        print("Warning: Prescription Date not found or empty in each_table_row_layout. Using default 'N/A'.")
    if prescription_time_val is None:
        prescription_time_val = "N/A"
        print("Warning: Prescription Time not found or empty in each_table_row_layout. Using default 'N/A'.")

    extra_metric_data = None
    if each_entry_layout_data:
        for entry_key, entry_value in each_entry_layout_data.items():
            if entry_value.get("title", "").strip().lower() == "supportive care":
                supportive_care_content = entry_value.get("subtitles", {}).get("subtitle_1", {}).get("content","").strip()
                if supportive_care_content: # Check if not empty after strip
                    extra_metric_data = json.dumps({"supportive_care": supportive_care_content})
                break

    cur.execute("""
        INSERT INTO treatment_chart.observation (
            diagnosis_id, prescription_date, prescription_time,
            weight, length, bsa, tfr, tfv, ivm, ivf,
            feeds, gir_mg_kg_min, k_plus, egfr, extra_metric
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        RETURNING observation_id, created_at;
    """, (
        fk_diagnosis_id, prescription_date_val, prescription_time_val,
        weight_val, length_val, bsa_val, tfr_val, tfv_val, ivm_val, ivf_val,
        feeds_val, gir_mg_kg_min_val, k_plus_val, egfr_val, extra_metric_data
    ))
    result = cur.fetchone()
    observation_pk_id = result[0]
    created_at_timestamp = result[1]
    print(f"Observation PK (DB-generated): {observation_pk_id}, Created At (DB): {created_at_timestamp}")
    print(f"  Prescription Date: {prescription_date_val}, Prescription Time: {prescription_time_val}")
    return observation_pk_id

def insert_extra_table_layouts(cur, data, fk_observation_id):
    each_entry_layout_data = data.get("each_entry_layout")
    each_table_row_layout_data = data.get("each_table_row_layout")
    if each_entry_layout_data or each_table_row_layout_data:
        combined_layouts = {
            "treatment_entries_layout_archive": each_entry_layout_data if each_entry_layout_data else {},
            "observation_params_layout_archive": each_table_row_layout_data if each_table_row_layout_data else {}
        }
        try:
            json_content_for_extra_table = json.dumps(combined_layouts)
            cur.execute("""
                INSERT INTO treatment_chart.extra_table (observation_id, json_content)
                VALUES (%s, %s);
            """, (fk_observation_id, json_content_for_extra_table))
            print(f"Stored combined layouts in extra_table for Observation PK: {fk_observation_id}")
        except TypeError as te:
            print(f"Error serializing combined layouts to JSON for extra_table: {te}")
    else:
        print(f"Neither 'each_entry_layout' nor 'each_table_row_layout' found to store in extra_table.")

# --- Detail Table Insertion Functions ---
def insert_respiratory_support(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.respiratory_support (observation_id, content, rate, volume) VALUES (%s, %s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("rate"), subtitle_data.get("volume")))

def insert_sedation(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.sedation (observation_id, content, dose, volume) VALUES (%s, %s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("dose"), subtitle_data.get("volume")))

def insert_inotropes(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.inotropes (observation_id, content, dose, volume) VALUES (%s, %s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("dose"), subtitle_data.get("volume")))

def insert_antimicrobials(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.antimicrobials (observation_id, content, day, dose, volume) VALUES (%s, %s, %s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("day"), subtitle_data.get("dose"), subtitle_data.get("volume")))

def insert_iv_fluid(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.iv_fluid (observation_id, content, rate, volume) VALUES (%s, %s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("rate"), subtitle_data.get("volume")))

def insert_feeds(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.feeds (observation_id, content, volume) VALUES (%s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("volume")))

def insert_other_medications(cur, fk_observation_id, subtitle_data):
    content = subtitle_data.get("content","").strip()
    if not content: return
    cur.execute("INSERT INTO treatment_chart.other_medications (observation_id, content, dose, volume) VALUES (%s, %s, %s, %s);",
                (fk_observation_id, content, subtitle_data.get("dose"), subtitle_data.get("volume")))


# --- Main Processing Logic ---
def process_json_data(json_input_str_or_dict):
    if isinstance(json_input_str_or_dict, str):
        data = json.loads(json_input_str_or_dict)
    elif isinstance(json_input_str_or_dict, dict):
        data = json_input_str_or_dict
    else:
        raise TypeError("Input must be a JSON string or a Python dictionary.")

    db_params = {
        "dbname": "mydb",
        "user": "admin",
        "password": "admin",
        "host": "192.168.1.153",
        "port": "5432"
    }

    print("\n=== PostgreSQL Connection Parameters ===")
    print(f"Database: {db_params['dbname']}")
    print(f"Host: {db_params['host']}")
    print(f"Port: {db_params['port']}")
    print(f"User: {db_params['user']}")

    conn = None
    cur = None

    try:
        print("\n=== Attempting Database Connection ===")
        conn = psycopg2.connect(**db_params)
        cur = conn.cursor()
        print("✓ Successfully connected to PostgreSQL database")

        print("\n=== Starting Data Insertion Process ===")
        print("1. Inserting/Updating Patient Record...")
        patient_pk_uuid = insert_patient(cur, data)
        print(f"✓ Patient record processed with UUID: {patient_pk_uuid}")

        print("\n2. Inserting Diagnosis Record...")
        diagnosis_pk_id = insert_diagnosis(cur, data, patient_pk_uuid)
        print(f"✓ Diagnosis record created with ID: {diagnosis_pk_id}")

        each_entry_layout_data = data.get("each_entry_layout", {})
        each_table_row_layout_data = data.get("each_table_row_layout", {})
        
        print("\n3. Inserting Observation Record...")
        observation_pk_id = insert_observation(cur, data, diagnosis_pk_id,
                                               each_entry_layout_data, each_table_row_layout_data)
        print(f"✓ Observation record created with ID: {observation_pk_id}")

        print("\n4. Archiving Layout Data...")
        insert_extra_table_layouts(cur, data, observation_pk_id)
        print("✓ Layout data archived successfully")

        if each_entry_layout_data:
            print("\n5. Processing Treatment Details...")
            treatment_count = 0
            for entry_key, entry_value in each_entry_layout_data.items():
                title = entry_value.get("title", "").strip().lower()
                subtitles_dict = entry_value.get("subtitles")
                if not subtitles_dict:
                    continue
                
                subtitle_data = subtitles_dict.get("subtitle_1", {})
                if not subtitle_data:
                    continue
                
                print(f"\n   Processing treatment: {title}")
                if title == "respiratory support":
                    insert_respiratory_support(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
                elif title == "sedation, analgesia, and neuromuscular blockade":
                    insert_sedation(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
                elif title == "inotropes and anti-hypertensives":
                    insert_inotropes(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
                elif title == "antimicrobials":
                    insert_antimicrobials(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
                elif title == "iv fluid":
                    insert_iv_fluid(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
                elif title == "feeds":
                    insert_feeds(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
                elif title == "other medications":
                    insert_other_medications(cur, observation_pk_id, subtitle_data)
                    treatment_count += 1
            print(f"✓ Processed {treatment_count} treatment records")

        print("\n=== Committing Transaction ===")
        conn.commit()
        print("✓ All changes committed successfully!")
        print("\n=== Data Insertion Complete ===")
        print(f"Summary:")
        print(f"- Patient UUID: {patient_pk_uuid}")
        print(f"- Diagnosis ID: {diagnosis_pk_id}")
        print(f"- Observation ID: {observation_pk_id}")

    except psycopg2.Error as e:
        if conn: 
            print("\n=== Rolling Back Transaction ===")
            conn.rollback()
            print("✓ Transaction rolled back due to error")
        print(f"\n❌ Database error: {e}")
        if hasattr(cur, 'query') and cur.query: 
            print(f"Failed query: {cur.query}")
    except ValueError as ve:
        if conn: 
            print("\n=== Rolling Back Transaction ===")
            conn.rollback()
            print("✓ Transaction rolled back due to validation error")
        print(f"\n❌ Data validation error: {ve}")
    except Exception as e:
        if conn: 
            print("\n=== Rolling Back Transaction ===")
            conn.rollback()
            print("✓ Transaction rolled back due to unexpected error")
        print(f"\n❌ An unexpected error occurred: {e}")
    finally:
        if cur: 
            print("\n=== Closing Database Cursor ===")
            cur.close()
            print("✓ Cursor closed")
        if conn: 
            print("\n=== Closing Database Connection ===")
            conn.close()
            print("✓ Connection closed")

# --- Example Usage ---
if __name__ == "__main__":
    json_data_from_user = {'uuid': '5d2e870f-1915-4c1a-83b3-d18ba4bf4123', 'datetime': '19-05-2025 06:34:57', 'date': '19-05-2025', 'Name': 'duma', 'Age_year': '4', 'Age_month': '5', 'Sex': 'Other', 'uhid': '123456789', 'bed_number': '12', 'Diagnosis': 'Flu Test', 'Consultants': 'Dr. X', 'JR': 'Dr. Y', 'SR': 'Dr. Z', 'print_time': '19-05-2025 06:34:57', 'each_entry_layout': {'entry_1': {'title': 'Respiratory support', 'columns': ['day', 'dose', 'volume'], 'subtitles': {'subtitle_1': {'content': 'some oxygen for duma', 'day': '', 'dose': '', 'volume': ''}}}, 'entry_2': {'title': 'Sedation, analgesia, and neuromuscular blockade', 'columns': [], 'subtitles': {}}, 'entry_3': {'title': 'Inotropes and Anti-hypertensives', 'columns': [], 'subtitles': {'subtitle_1': {'content': 'Dobutamine for duma'}}}}, 'each_table_row_layout': {'row_1': {'row_header_name': 'Date', 'row_header_description': '16-10-2025'}, 'row_2': {'row_header_name': 'Time', 'row_header_description': 'xyztime for duma'}, 'row_3': {'row_header_name': 'Weight', 'row_header_description': '20kg for duma'}, 'row_4': {'row_header_name': 'Length', 'row_header_description': ' '}, 'row_5': {'row_header_name': 'BSA', 'row_header_description': ' '}, 'row_6': {'row_header_name': 'TFR', 'row_header_description': ' '}, 'row_7': {'row_header_name': 'TFV', 'row_header_description': ' '}, 'row_8': {'row_header_name': 'IVM', 'row_header_description': ' '}}}
    process_json_data(json_data_from_user)

    print("\n--- Processing another example ---")
    json_data_example_str_2 = """
    {
        "uuid": "app-uuid-final-002",
        "Name": "Final Patient Two",
        "uhid": "UHID-FINAL-002",
        "Diagnosis": "Common Cold",
        "Consultants": "Dr. House",
        "each_entry_layout": {
            "entry_A": {
                "title": "Other Medications ", 
                "subtitles": {"subtitle_1": {"content": "Paracetamol 500mg", "dose": "1 tab", "volume": "PO"}}
            },
             "entry_B": {
                "title": "Supportive care",
                "subtitles": {"subtitle_1": {"content": "Rest and fluids"}}
            }
        },
        "each_table_row_layout": {
            "row_X1": { "row_header_name": "Date", "row_header_description": "2023-11-10" },
            "row_X2": { "row_header_name": "Time", "row_header_description": "09:00 AM" },
            "row_X3": { "row_header_name": "Weight", "row_header_description": "70 kg" }
        }
    }
    """
    process_json_data(json_data_example_str_2)